@using Microsoft.AspNetCore.Components.Web
@using System.Drawing

<svg width="@Width" height="@Height" @onmouseleave="HandleMouseLeave" style="background:#ffffff; border-radius:12px; box-shadow:0 2px 6px rgba(0,0,0,0.2)">
    @if (Data != null && Data.Length > 0 && Labels != null && Labels.Length == Data.Length)
    {
        var total = Data.Sum();
        var currentAngle = 0.0;
        var centerX = Width / 2 - 30;
        var centerY = Height / 2;
        var radius = Math.Min(centerX, centerY) - 10;
        
        for (int i = 0; i < Data.Length; i++)
        {
            var percentage = (double)Data[i] / total;
            var angle = percentage * 360;
            var largeArcFlag = angle > 180 ? 1 : 0;
            
            var startX = centerX + radius * Math.Cos(currentAngle * Math.PI / 180);
            var startY = centerY + radius * Math.Sin(currentAngle * Math.PI / 180);
            
            var endX = centerX + radius * Math.Cos((currentAngle + angle) * Math.PI / 180);
            var endY = centerY + radius * Math.Sin((currentAngle + angle) * Math.PI / 180);
            
            var pathData = $"M {centerX},{centerY} L {startX},{startY} A {radius},{radius} 0 {largeArcFlag},1 {endX},{endY} Z";
            
            <path d="@pathData" 
                  fill="@GetColor(i)" 
                  stroke="white" 
                  stroke-width="2"
                  data-index="@i"
                  class="@(hoveredIndex == i ? "pie-segment-hover" : "")" />
            
            // Etiqueta del segmento
            var labelAngle = currentAngle + angle / 2;
            var labelX = centerX + (radius * 0.7) * Math.Cos(labelAngle * Math.PI / 180);
            var labelY = centerY + (radius * 0.7) * Math.Sin(labelAngle * Math.PI / 180);
            
            @:<text x="@labelX" y="@labelY" text-anchor="middle" dominant-baseline="middle" font-size="12" font-weight="bold" fill="white">  @($"{percentage:P0}")         </text>
            
            currentAngle += angle;
        }
        
        // Leyenda
        <g transform="translate(@(Width - 100), 20)">
            @for (int i = 0; i < Data.Length; i++)
            {
                <g transform="translate(0, @(i * 35))">
                    <rect width="15" height="15" fill="@GetColor(i)" rx="3" />
                    <text x="35" y="12" font-size="11" fill="#333">@Labels[i]</text>
                    <text x="35" y="25" font-size="10" fill="#666">@Data[i] (@((double)Data[i]/total)})</text>
                </g>
            }
        </g>
        
        // Tooltip
        @if (hoveredIndex >= 0)
        {
            <g class="pie-tooltip">
                <rect x="@(mouseX + 10)" y="@(mouseY - 25)" width="120" height="40" 
                      fill="rgba(0,0,0,0.8)" rx="5" />
                <text x="@(mouseX + 70)" y="@(mouseY - 10)" text-anchor="middle" 
                      fill="white" font-size="12" font-weight="bold">
                    @Labels[hoveredIndex]
                </text>
                <text x="@(mouseX + 70)" y="@(mouseY + 5)" text-anchor="middle" 
                      fill="white" font-size="11">
                    @Data[hoveredIndex] (@((double)Data[hoveredIndex]/total))
                </text>
            </g>
        }
    }
    else
    {
        @:<text x="50%" y="50%" text-anchor="middle" dominant-baseline="middle" fill="#666" font-size="14">No hay datos disponibles</text>
    }
</svg>

<style>
    .pie-segment-hover {
        filter: brightness(1.2);
        transition: filter 0.2s ease;
    }
    
    .pie-tooltip {
        pointer-events: none;
    }
</style>

@code {
    [Parameter] public int[] Data { get; set; } = Array.Empty<int>();
    [Parameter] public string[] Labels { get; set; } = Array.Empty<string>();
    [Parameter] public int Width { get; set; } = 400;
    [Parameter] public int Height { get; set; } = 300;
    
    private int hoveredIndex = -1;
    private double mouseX;
    private double mouseY;
    
    private string[] colorPalette = {
        "#007bff", "#28a745", "#ffc107", "#dc3545", "#6f42c1",
        "#20c997", "#fd7e14", "#e83e8c", "#6c757d", "#0dcaf0"
    };
    
    private string GetColor(int index)
    {
        return colorPalette[index % colorPalette.Length];
    }
    
   
    private void HandleMouseLeave()
    {
        hoveredIndex = -1;
    }
}