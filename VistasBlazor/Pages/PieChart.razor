@namespace DashboardApp.Components
@using Microsoft.AspNetCore.Components.Web

<svg width="@Width" height="@Height" 
     @onmousemove="HandleMouseMove"
     @onmouseleave="HandleMouseLeave" 
     style="background:#ffffff; border-radius:12px; box-shadow:0 2px 6px rgba(0,0,0,0.2)">
    
    @if (Data != null && Data.Length > 0 && Labels != null && Labels.Length == Data.Length)
    {
        var total = Data.Sum();
        var currentAngle = -90.0; // Comenzar desde arriba
        var centerX = (Width - 150) / 2; // Espacio para leyenda
        var centerY = Height / 2;
        var radius = Math.Min(centerX, centerY) - 20;
        
        // Dibujar segmentos del pie
        for (int i = 0; i < Data.Length; i++)
        {
            var percentage = (double)Data[i] / total;
            var angle = percentage * 360;
            var largeArcFlag = angle > 180 ? 1 : 0;
            
            var startX = centerX + radius * Math.Cos(currentAngle * Math.PI / 180);
            var startY = centerY + radius * Math.Sin(currentAngle * Math.PI / 180);
            
            var endX = centerX + radius * Math.Cos((currentAngle + angle) * Math.PI / 180);
            var endY = centerY + radius * Math.Sin((currentAngle + angle) * Math.PI / 180);
            
            var pathData = $"M {centerX},{centerY} L {startX},{startY} A {radius},{radius} 0 {largeArcFlag},1 {endX},{endY} Z";
            
            var isHovered = hoveredIndex == i;
            var segmentRadius = isHovered ? radius + 10 : radius;
            
            // Recalcular para segmento hover
            if (isHovered)
            {
                startX = centerX + segmentRadius * Math.Cos(currentAngle * Math.PI / 180);
                startY = centerY + segmentRadius * Math.Sin(currentAngle * Math.PI / 180);
                endX = centerX + segmentRadius * Math.Cos((currentAngle + angle) * Math.PI / 180);
                endY = centerY + segmentRadius * Math.Sin((currentAngle + angle) * Math.PI / 180);
                pathData = $"M {centerX},{centerY} L {startX},{startY} A {segmentRadius},{segmentRadius} 0 {largeArcFlag},1 {endX},{endY} Z";
            }
            
            <path d="@pathData" 
                  fill="@GetColor(i)" 
                  stroke="white" 
                  stroke-width="3"
                  data-index="@i"
                  @onmouseover="@(() => hoveredIndex = i)"
                  style="cursor: pointer; transition: all 0.3s ease; filter: @(isHovered ? "brightness(1.2) drop-shadow(0 4px 8px rgba(0,0,0,0.3))" : "drop-shadow(0 2px 4px rgba(0,0,0,0.1))")" />
            
            // Etiqueta del segmento (solo si es mayor a 5%)
            if (percentage >= 0.05)
            {
                var labelAngle = currentAngle + angle / 2;
                var labelRadius = isHovered ? segmentRadius * 0.65 : radius * 0.65;
                var labelX = centerX + labelRadius * Math.Cos(labelAngle * Math.PI / 180);
                var labelY = centerY + labelRadius * Math.Sin(labelAngle * Math.PI / 180);

                <g>
                    <text x="@labelX" y="@(labelY + 5)">
                        <tspan
                            text-anchor="middle"
                            font-size="14"
                            font-weight="bold"
                            fill="white"
                            style="pointer-events: none; text-shadow: 0 2px 4px rgba(0,0,0,0.3)">
                            @($"{percentage:P0}")
                        </tspan>
                    </text>
                </g>
            }
            
            currentAngle += angle;
        }
        
        // Leyenda mejorada
        <g transform="translate(@(Width - 140), 30)">
            <rect width="130" height="@(Data.Length * 45 + 20)" 
                  fill="rgba(248, 249, 250, 0.95)" 
                  rx="10" 
                  stroke="#e0e0e0" 
                  stroke-width="1"/>
            
            <text x="65" y="18" 
                  text-anchor="middle" 
                  font-size="13" 
                  font-weight="bold" 
                  fill="#333">
                Leyenda
            </text>
            
            @for (int i = 0; i < Data.Length; i++)
            {
                var yPos = 35 + i * 45;
                var percentage = (double)Data[i] / total;
                
                <g transform="translate(10, @yPos)" 
                   @onmouseover="@(() => hoveredIndex = i)"
                   @onmouseout="@(() => hoveredIndex = -1)"
                   style="cursor: pointer">
                    
                    <rect width="20" height="20" 
                          fill="@GetColor(i)" 
                          rx="4"
                          style="filter: @(hoveredIndex == i ? "brightness(1.2)" : "none"); transition: all 0.2s ease" />
                    
                    <text x="28" y="15" 
                          font-size="12" 
                          font-weight="@(hoveredIndex == i ? "bold" : "600")" 
                          fill="#333">
                        @Labels[i]
                    </text>
                    
                    <text x="28" y="30" 
                          font-size="11" 
                          fill="#666">
                        @Data[i] (@($"{percentage:P1}"))
                    </text>
                </g>
            }
        </g>
        
        // Tooltip mejorado
        @if (hoveredIndex >= 0 && mouseX > 0)
        {
            var tooltipWidth = 160;
            var tooltipHeight = 65;
            var tooltipX = mouseX + 15;
            var tooltipY = mouseY - 35;
            
            // Ajustar posición si se sale del canvas
            if (tooltipX + tooltipWidth > Width)
            {
                tooltipX = mouseX - tooltipWidth - 15;
            }
            if (tooltipY < 0)
            {
                tooltipY = 10;
            }
            if (tooltipY + tooltipHeight > Height)
            {
                tooltipY = Height - tooltipHeight - 10;
            }
            
            var percentage = (double)Data[hoveredIndex] / total;
            
            <g class="pie-tooltip">
                <!-- Sombra del tooltip -->
                <rect x="@(tooltipX + 2)" y="@(tooltipY + 2)" 
                      width="@tooltipWidth" height="@tooltipHeight" 
                      fill="rgba(0,0,0,0.2)" 
                      rx="8" />
                
                <!-- Fondo del tooltip -->
                <rect x="@tooltipX" y="@tooltipY" 
                      width="@tooltipWidth" height="@tooltipHeight" 
                      fill="@GetColor(hoveredIndex)" 
                      rx="8"
                      style="filter: brightness(0.95)" />
                
                <!-- Borde del tooltip -->
                <rect x="@tooltipX" y="@tooltipY" 
                      width="@tooltipWidth" height="@tooltipHeight" 
                      fill="none"
                      stroke="white"
                      stroke-width="2"
                      rx="8" />
                
                <!-- Título -->
                <text x="@(tooltipX + tooltipWidth/2)" y="@(tooltipY + 22)" 
                      text-anchor="middle" 
                      fill="white" 
                      font-size="14" 
                      font-weight="bold">
                    @Labels[hoveredIndex]
                </text>
                
                <!-- Valor -->
                <text x="@(tooltipX + tooltipWidth/2)" y="@(tooltipY + 42)" 
                      text-anchor="middle" 
                      fill="white" 
                      font-size="13"
                      font-weight="600">
                    @Data[hoveredIndex] unidades
                </text>
                
                <!-- Porcentaje -->
                <text x="@(tooltipX + tooltipWidth/2)" y="@(tooltipY + 58)" 
                      text-anchor="middle" 
                      fill="rgba(255,255,255,0.9)" 
                      font-size="12">
                    @($"{percentage:P1}") del total
                </text>
            </g>
        }
        
        <!-- Círculo central para efecto donut (opcional) -->
        <circle cx="@centerX" cy="@centerY" r="@(radius * 0.4)" 
                fill="white" 
                stroke="#f0f0f0" 
                stroke-width="2"/>
        
        <!-- Texto central con total -->
        <g>
            <text x="@centerX" y="@(centerY - 5)">
                <tspan
                    text-anchor="middle"
                    font-size="24"
                    font-weight="bold"
                    fill="#333">
                    @total
                </tspan>
            </text>
            <text x="@centerX" y="@(centerY + 17)">
                <tspan
                    text-anchor="middle"
                    font-size="12"
                    fill="#666">
                    Total
                </tspan>
            </text>
        </g>
    }
    else
    {
        <g>
            <text x="@(Width/2)" y="@(Height/2 + 5)">
                <tspan
                    text-anchor="middle"
                    fill="#999"
                    font-size="16"
                    font-style="italic">
                    📊 No hay datos disponibles
                </tspan>
            </text>
        </g>
    }
</svg>

<style>
    .pie-tooltip {
        pointer-events: none;
        animation: fadeIn 0.2s ease;
    }
    
    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: scale(0.9);
        }
        to {
            opacity: 1;
            transform: scale(1);
        }
    }
</style>

@code {
    [Parameter] public int[] Data { get; set; } = Array.Empty<int>();
    [Parameter] public string[] Labels { get; set; } = Array.Empty<string>();
    [Parameter] public int Width { get; set; } = 500;
    [Parameter] public int Height { get; set; } = 400;
    
    private int hoveredIndex = -1;
    private double mouseX;
    private double mouseY;
    
    private string[] colorPalette = {
        "#667eea", "#28a745", "#ffc107", "#dc3545", "#6f42c1",
        "#20c997", "#fd7e14", "#e83e8c", "#17a2b8", "#0dcaf0"
    };
    
    private string GetColor(int index)
    {
        return colorPalette[index % colorPalette.Length];
    }
    
    private void HandleMouseMove(MouseEventArgs e)
    {
        mouseX = e.OffsetX;
        mouseY = e.OffsetY;
    }
    
    private void HandleMouseLeave()
    {
        hoveredIndex = -1;
        mouseX = 0;
        mouseY = 0;
    }
}